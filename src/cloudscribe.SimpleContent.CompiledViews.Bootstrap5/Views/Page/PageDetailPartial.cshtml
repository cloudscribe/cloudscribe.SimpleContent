@model cloudscribe.SimpleContent.Web.ViewModels.PageViewModel
@inject IStringLocalizer<SimpleContent> sr
@inject ISimpleContentThemeHelper themeHelper
@{
    var themeSettings = themeHelper.GetThemeSettings();
}
@functions{

    public string GetFooterClass()
    {

        return "bh";
    }
    public string GetEditTitle()
    {
        if (Model.CurrentPage != null) return Model.CurrentPage.Title;
        return "";
    }

}
<article class="page" data-id="@Model.CurrentPage.Id"
         data-approve-comment-url="@Url.Action("AjaxApproveComment", "Page")"
         data-delete-comment-url="@Url.Action("AjaxDeleteComment", "Page")"
         itemscope itemtype="http://schema.org/Article">
    <partial name="DraftInfoPartial" model="@Model" />
    <partial name="HistoryInfoPartial" model="@Model" />
    @if (Model.CurrentPage.ShowHeading)
    {
        <header class="">
            <h1 id="article-title" itemprop="headline name">@Model.CurrentPage.Title</h1>
            <partial name="PageTopPartial" model="@Model" />
        </header>
    }
    <partial name="PageContentBodyPartial" model="@Model" />
    <partial name="PageBottomPartial" model="@Model" />
    @if (!Model.CurrentPage.ShowHeading)
    {
        <schema-org-meta itemprop="headline" content="@Model.CurrentPage.Title"></schema-org-meta>
    }
    @{
        var imageUrl = Model.ExtractFirstImageUrl(Model.CurrentPage, Url);
        var imageSize = Model.ExtractFirstImageDimensions(Model.CurrentPage);
    }
    @if (!string.IsNullOrEmpty(imageUrl))
    {
        <div class="collapse" aria-hidden="true" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
            <schema-org-meta itemprop="url" content="@imageUrl"></schema-org-meta>
            <schema-org-meta itemprop="width" content="@imageSize.Width"></schema-org-meta>
            <schema-org-meta itemprop="height" content="@imageSize.Height"></schema-org-meta>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.CurrentPage.Author))
    {
        <div class="collapse" aria-hidden="true" itemprop="author" itemscope itemtype="http://schema.org/Person">
            <schema-org-meta itemprop="name" content="@Model.CurrentPage.Author"></schema-org-meta>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.ProjectSettings.Publisher))
    {
        <div class="collapse" aria-hidden="true" itemprop="publisher" itemscope itemtype="http://schema.org/@Model.ProjectSettings.PublisherEntityType">
            <schema-org-meta itemprop="name" content="@Model.ProjectSettings.Publisher"></schema-org-meta>
            <div class="collapse" aria-hidden="true" itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
                <schema-org-meta itemprop="url" content="@Model.ProjectSettings.PublisherLogoUrl"></schema-org-meta>
                <schema-org-meta itemprop="width" content="@Model.ProjectSettings.PublisherLogoWidth"></schema-org-meta>
                <schema-org-meta itemprop="height" content="@Model.ProjectSettings.PublisherLogoHeight"></schema-org-meta>
            </div>
        </div>
    }
    @if (Model.CurrentPage.PubDate.HasValue)
    {
        <schema-org-meta itemprop="datePublished" content="@Model.CurrentPage.PubDate.Value.ToString("s", CultureInfo.InvariantCulture)"></schema-org-meta>
        <schema-org-meta itemprop="dateModified" content="@Model.CurrentPage.LastModified.ToString("s", CultureInfo.InvariantCulture)"></schema-org-meta>
    }
    @if (Model.CurrentPage != null && Model.CurrentPage.ShowMenu)
    {
        @await Component.InvokeAsync("Navigation", new { viewName = "ChildTree", filterName = NamedNavigationFilters.ChildTree, startingNodeKey = "" })
    }
   <partial name="CommentWrapperPartial" model="@Model" />
</article>
@if (Model.CurrentPage != null && Model.CanEdit && !Model.ShowingDeleted && !Model.ShowingDraft && !Model.HistoryId.HasValue && Model.CurrentPage.IsPublished)
{
    <form id="unpubform" class="form-inline" asp-controller="Page" asp-action="UnPublish" method="post">
        <input name="id" value="@Model.CurrentPage.Id" type="hidden" />
        <div class="modal fade" id="confirmUnpublishModal" tabindex="-1" role="dialog" aria-labelledby="confirmUnpublishHeading">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="confirmUnpublishHeading">@sr["Confirm Unpublish"]</h4>
                        <button type="button" data-bs-dismiss="modal" class="btn-close" aria-label='@sr["Close"]'></button>
                    </div>
                    <div class="modal-body">
                        @string.Format(sr["Are you sure you want to unpublish the page {0}?"], Model.CurrentPage.Title)
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">@sr["Cancel"]</button>
                        <input type="submit" value='@sr["Unpublish"]' class="btn btn-danger btn-ok" />
                    </div>
                </div>
            </div>
        </div>
    </form>
}
