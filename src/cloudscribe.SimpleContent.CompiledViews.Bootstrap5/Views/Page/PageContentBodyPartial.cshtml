@model cloudscribe.SimpleContent.Web.ViewModels.PageViewModel
@inject IStringLocalizer<SimpleContent> sr
@inject IContentTemplateService templateService
@inject IHttpContextAccessor HttpContextAccessor
@{
    var showDraft = Context.Request.Query.ContainsKey("showDraft") 
        && Context.Request.Query["showDraft"][0].ToString().ToLower().Equals("true");

    var usingHistory = Context.Request.Query.ContainsKey("historyId");


    string dynamicViewName = null;
    object templateModel = null;
    if (Model.CurrentPage != null && !string.IsNullOrWhiteSpace(Model.CurrentPage.TemplateKey) && !usingHistory)
    {
        var template = await templateService.GetTemplate(Model.CurrentPage.ProjectId, Model.CurrentPage.TemplateKey);
        if (template != null && !string.IsNullOrWhiteSpace(template.DynamicRenderPartialView))
        {
            templateModel = templateService.DesrializeTemplateModel(Model.CurrentPage, template, showDraft);
            dynamicViewName = template.DynamicRenderPartialView;
        }
    }
}

@if (!usingHistory && templateModel != null && !string.IsNullOrWhiteSpace(dynamicViewName))
{
    <partial name="@dynamicViewName" model="@templateModel" />
}
else
{
    // old school content field more suitable when showing history
    <div itemprop="articleBody">@Html.Raw(Model.FilterHtml(Model.CurrentPage))</div>
}
